from __future__ import annotations
import carb as carb
import omni.kit.usd.layers._omni_kit_usd_layers
from omni.kit.usd.layers._omni_kit_usd_layers import ILayersInstance
from omni.kit.usd.layers._omni_kit_usd_layers import acquire_specs_linking_interface
from omni.kit.usd.layers._omni_kit_usd_layers import release_specs_linking_interface
from pxr import Sdf
__all__: list = ['SpecsLinking']
class SpecsLinking:
    def __init__(self, layers_instance: omni.kit.usd.layers._omni_kit_usd_layers.ILayersInstance, usd_context) -> None:
        ...
    def _destroy(self):
        ...
    def _populate_all_paths(self, item: carb.dictionary._dictionary.Item):
        ...
    def get_all_spec_links(self):
        ...
    def get_spec_layer_links(self, spec_path: typing.Union[str, pxr.Sdf.Path], hierarchy: bool = False):
        ...
    def get_spec_links_for_layer(self, layer_identifier: str) -> typing.List[str]:
        ...
    def is_enabled(self) -> bool:
        ...
    def is_spec_linked(self, spec_path: str, layer_identifier: str = ''):
        ...
    def link_spec(self, spec_path: typing.Union[str, pxr.Sdf.Path], layer_identifier: str, hierarchy: bool = False) -> typing.List[str]:
        ...
    def unlink_all_specs(self):
        ...
    def unlink_spec(self, spec_path: typing.Union[str, pxr.Sdf.Path], layer_identifier: str, hierarchy: bool = False) -> typing.List[str]:
        ...
    def unlink_spec_from_all_layers(self, spec_path: typing.Union[str, pxr.Sdf.Path], hierarchy: bool = False) -> typing.Dict[str, typing.List[str]]:
        ...
    def unlink_specs_to_layer(self, layer_identifier: str) -> typing.List[str]:
        ...
    @property
    def usd_context(self):
        ...
