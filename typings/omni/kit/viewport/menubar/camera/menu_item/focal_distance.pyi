from __future__ import annotations
import asyncio as asyncio
import carb as carb
import math as math
import omni as omni
from omni.kit.viewport.menubar.camera.menu_item.camera_setting import AbstractCameraSetting
from omni.kit.viewport.menubar.core.delegate.icon_menu_delegate import IconMenuDelegate
from omni.kit.viewport.menubar.core.delegate.spinner_menu_delegate import SpinnerMenuDelegate
from omni.kit.viewport.menubar.core.model.usd_attribute_model import USDAttributeModel
from omni import ui
from omni.ui import scene as sc
from pxr import Gf
import weakref as weakref
__all__: list = ['CamFocalData', 'FocusClickGesture', 'FocusDragGesture', 'PreventOthers', 'ViewportClickManipulator', 'FocalPickerScene', 'CameraFocalDistance']
class CamFocalData:
    def __del__(self):
        ...
    def __init__(self, cam_focal: CameraFocalDistance, viewport_api):
        ...
    def destroy(self):
        ...
    def focus_query_completed(self, prim_path: str, world_space_pos, *args):
        ...
    def set_focus_position(self, ndc_mouse, auto_destruct: bool = True):
        ...
class CameraFocalDistance(omni.kit.viewport.menubar.camera.menu_item.camera_setting.AbstractCameraSetting):
    def _CameraFocalDistance__create_focus_picker_scene(self):
        ...
    def _CameraFocalDistance__destroy_scene_sync(self):
        ...
    def __init__(self, model: omni.kit.viewport.menubar.core.model.usd_attribute_model.USDAttributeModel, viewport_context, enabled: bool = True):
        ...
    def _build_ui(self) -> typing.List[omni.ui._ui.MenuDelegate]:
        ...
    def _destroy_scene(self):
        ...
    def _sample(self):
        ...
    def destroy(self):
        ...
class FocalPickerScene:
    def __del__(self):
        ...
    def __init__(self, cam_focal_data: CamFocalData, ui_frame):
        ...
    def destroy(self):
        ...
class FocusClickGesture(omni.ui_scene._scene.ClickGesture):
    def __init__(self, cam_focal_data: CamFocalData, *args, **kwargs):
        ...
    def on_ended(self, *args, **kwargs):
        ...
class FocusDragGesture(omni.ui_scene._scene.DragGesture):
    def __init__(self, cam_focal_data: CamFocalData, *args, **kwargs):
        ...
    def on_changed(self, *args, **kwargs):
        ...
    def on_ended(self, *args, **kwargs):
        ...
class PreventOthers(omni.ui_scene._scene.GestureManager):
    """
    Class to prevent any gestures (like selection) from interfering with the focus pick
    """
    def can_be_prevented(self, gesture):
        ...
    def should_prevent(self, gesture, preventer):
        ...
class ViewportClickManipulator(omni.ui_scene._scene.Manipulator):
    def __del__(self):
        ...
    def __init__(self, cam_focal_data: CamFocalData, *args, mouse_button: int = 0, **kwargs):
        ...
    def destroy(self):
        ...
    def on_build(self):
        ...
