from __future__ import annotations
from _weakref import proxy
import carb as carb
from functools import partial
import omni as omni
from omni.kit.app._impl import SettingChangeSubscription
from omni.kit.viewport.menubar.core.delegate.icon_menu_delegate import IconMenuDelegate
from omni.kit.viewport.menubar.core.delegate.viewport_menu_delegate import ViewportMenuDelegate
from omni.kit.viewport.menubar.core.menu_item.selectable_menu_item import SelectableMenuItem
from omni.kit.viewport.menubar.core.menu_item.viewport_menu_container import ViewportMenuContainer
from omni.kit.viewport.menubar.core.model.setting_model import SettingModel
from omni.kit.viewport.menubar.core.viewport_menu_model import MenuDisplayStatus
from omni.kit.viewport.menubar.lighting.actions import _import_light_rig
from omni.kit.viewport.menubar.lighting.actions import _set_lighting_mode
from omni.kit.viewport.menubar.lighting.utility import RefCountedUsdContextSub
from omni.kit.viewport.menubar.lighting.utility import _get_light_rig_setting_key
from omni.kit.viewport.menubar.lighting.utility import _get_rig_names_and_paths
from omni.kit.viewport.menubar.lighting.utility import _make_light_mode_setting_key
from omni.kit.viewport.menubar.lighting.utility import stage_has_api_type
from omni import ui
from pxr import UsdLux
__all__: list = ['MenuContainer']
class MenuContainer(omni.kit.viewport.menubar.core.menu_item.viewport_menu_container.ViewportMenuContainer):
    """
    The menu with the list of lighting options
    """
    def _MenuContainer__adjust_render_settings(self, adjust_rules: typing.List[str], has_any_light: typing.Optional[bool], search_from_dflt: bool, usd_context: omni.usd._usd.UsdContext):
        ...
    def _MenuContainer__auto_rig_disabled(self, menu_context: MenuContext, *args, **kwargs):
        ...
    def _MenuContainer__build_lighting_menu(self, menu_context: MenuContext):
        ...
    def _MenuContainer__build_root_menu(self, menu_context: MenuContext):
        ...
    def _MenuContainer__get_is_rig_and_lighting_mode(self, lighting_mode: str):
        ...
    def _MenuContainer__get_lighting_mode(self, usd_context: omni.usd._usd.UsdContext, settings: carb.settings._settings.ISettings):
        ...
    def _MenuContainer__import_current_light_rig(self, menu_context: MenuContext, *args, **kwargs):
        ...
    def _MenuContainer__on_mode_changed(self, usd_context: omni.usd._usd.UsdContext, value: str):
        ...
    def _MenuContainer__on_stage_open(self, menu_context: MenuContext, usd_context_name: str, usd_context: omni.usd._usd.UsdContext, prev_mode: str):
        ...
    def _MenuContainer__post_notification(self, msg: str, warn: bool = False):
        ...
    def _MenuContainer__recheck_all_items(self, usd_context, value: str):
        ...
    def _MenuContainer__recheck_all_items_async(self, usd_context: omni.usd._usd.UsdContext, value: str):
        ...
    def _MenuContainer__rig_path_changed(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _MenuContainer__run_render_settings_adjustments(self, menu_context: MenuContext, search_from_dflt: bool, usd_context: omni.usd._usd.UsdContext, settings: carb.settings._settings.ISettings):
        ...
    def _MenuContainer__set_lighting_mode(self, lighting_mode: typing.Union[str, int], menu_context: MenuContext, menu_item: typing.Optional[omni.ui._ui.MenuItem] = None):
        ...
    def _MenuContainer__set_stage_lighting_mode(self, menu_context: MenuContext):
        ...
    def _MenuContainer__view_light_changed(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def __init__(self, ext_id: str):
        ...
    def _create_menu_context(self, viewport_api: ViewportAPI, hide_on_click: bool = False):
        ...
    def build_fn(self, viewport_context: typing.Dict):
        """
        Entry point for the per Viewport menu bar item
        """
    def can_contract(self, factory_args: dict) -> bool:
        ...
    def contract(self, factory_args: dict) -> bool:
        ...
    def destroy(self) -> None:
        ...
    def expand(self, factory_args: dict) -> None:
        ...
    def get_display_status(self, factory_args: dict) -> omni.kit.viewport.menubar.core.viewport_menu_model.MenuDisplayStatus:
        ...
    def get_require_size(self, factory_args: dict, expand: bool = False) -> float:
        ...
class MenuContext:
    has_any_light: typing.Optional[bool]
    import_item: omni.ui._ui.MenuItem
    root_menu: omni.ui._ui.Menu
    def _MenuContext__post_do_callback(self, cmd_dict: dict):
        ...
    def __del__(self):
        ...
    def __init__(self, viewport_api, hide_on_click: bool, on_stage_opened: typing.Callable, setting_key: str, setting_change: typing.Callable, light_added_cb):
        ...
    def add_destroyable(self, destroyable):
        ...
    def add_menu_item(self, menu_item: omni.ui._ui.MenuItem):
        ...
    def destroy(self):
        ...
    def invalidate(self):
        ...
    @property
    def delegate(self) -> omni.ui._ui.MenuDelegate:
        ...
    @property
    def hide_on_click(self):
        ...
    @property
    def menu_items(self):
        ...
    @property
    def viewport_api(self):
        ...
