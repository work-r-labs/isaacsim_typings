from __future__ import annotations
import carb as carb
import importlib as importlib
from omni.kit.viewport.window.raycast import perform_raycast_query
from omni.ui import scene as sc
import omni.ui_scene._scene
import pxr.Gf
from pxr import Gf
__all__: list = ['ViewportClickFactory']
class ClickGesture(omni.ui_scene._scene.ClickGesture):
    def _ClickGesture__query_completed(self, prim_path: str, world_space_pos, *args):
        ...
    def __init__(self, viewport_api, mouse_button: int = 1):
        ...
    def on_clicked(self, usd_context_name: str, prim_path: str, world_space_pos: pxr.Gf.Vec3d, stage):
        ...
    def on_ended(self, *args):
        ...
class ViewportClickManipulator(omni.ui_scene._scene.Manipulator):
    def __init__(self, viewport_api, mouse_button: int = 1, **kwargs):
        ...
    def destroy(self):
        ...
    def on_build(self):
        ...
    @property
    def categories(self) -> typing.Sequence:
        ...
    @property
    def name(self) -> str:
        ...
class WorldSpacePositionCache:
    def _WorldSpacePositionCache__cache_screen_ndc(self, viewport_api, world_space_pos: pxr.Gf.Vec3d):
        ...
    def __init__(self):
        ...
    def get_world_position(self, viewport_api, prim_path: str, world_space_pos: typing.Sequence[float], mouse_ndc: typing.Sequence[float]):
        ...
