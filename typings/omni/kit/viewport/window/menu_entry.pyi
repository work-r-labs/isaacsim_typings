from __future__ import annotations
import carb as carb
import omni as omni
from omni.kit.viewport.window.viewport_actions import deregister_actions
from omni.kit.viewport.window.viewport_actions import register_actions
from omni.kit.viewport.window.window import ViewportWindow
from omni.ui._ui import Workspace
import typing
__all__: list = ['create_viewport_window_menu']
class _DockingDelegate:
    @staticmethod
    def get_delegate():
        ...
    def dock_viewport(self, window_name: str, viewport_index: int, default_window_name: str, number_of_entries: int):
        ...
    def wait_for_window(self, window_name: str, dock_name: str, position: omni.ui._ui.DockPosition, ratio: float, wait_frames: int):
        ...
class _MenuEntry:
    _MenuEntry__DEFAULT_VIEWPORT: typing.ClassVar[str] = 'Viewport'
    _MenuEntry__NUMBER_OF_ENTRIES: typing.ClassVar[int] = 2
    def _MenuEntry__is_window_visible(self) -> bool:
        ...
    def _MenuEntry__show_window(self, menu, visible):
        ...
    def __del__(self):
        ...
    def __init__(self, window_name: str, menu_label: str, open_window: bool, index: int, settings):
        ...
    def destroy(self):
        ...
class _ViewportLabeling:
    def _ViewportLabeling__format_str(self, vp_str: str, index: str):
        ...
    def __init__(self, settings):
        ...
    def menu_label(self, i: int):
        ...
    def window_name(self, i: int):
        ...
def _setting_to_dict(key: str, settings):
    ...
def create_viewport_window_menu(num_entries: int | None = None):
    ...
