from __future__ import annotations
import asyncio as asyncio
import carb as carb
from collections import defaultdict
from collections import namedtuple
import enum as enum
from functools import partial
import math as math
import omni as omni
from omni.kit.commands.command import execute
from omni.kit.material.library.material_utils import MaterialUtils
from omni.kit.property.material.scripts.widgets.material_binding.material_binding_widget import MaterialBindingWidget as UsdBindingAttributeWidget
from omni.kit.property.physx.builders import CustomTokenComboBuilder
from omni.kit.property.physx.builders import GearingWidgetBuilder
from omni.kit.property.physx import database
from omni.kit.property.physx import databaseUtils as dbutils
from omni.kit.property.physx.externals import Prompt
from omni.kit.property.physx.models import TfTokenAttributeModelWMetadata
from omni.kit.property.physx.utils import Limits
from omni.kit.property.physx.utils import OverlayButton
from omni.kit.property.physx.utils import StringPrompt
from omni.kit.property.physx.utils import add_disabled_styles
from omni.kit.property.physx.utils import enable_widget
from omni.kit.property.physx.utils import get_align_property_util
from omni.kit.property.physx.utils import is_parent_api_instance
from omni.kit.property.physx.utils import split_at_capitals
from omni.kit.property.usd.placeholder_attribute import PlaceholderAttribute
from omni.kit.property.usd.prim_path_widget import PrimPathWidget
from omni.kit.property.usd.usd_attribute_model import GfVecAttributeModel
from omni.kit.property.usd.usd_model_base import UsdBase
from omni.kit.property.usd.usd_property_widget import UsdPropertiesWidget
from omni.kit.property.usd.usd_property_widget import UsdPropertyUiEntry
from omni.kit.property.usd.usd_property_widget_builder import UsdPropertiesWidgetBuilder
from omni.kit.window.property.templates.simple_property_widget import SimplePropertyWidget
from omni.kit.window.property.templates.simple_property_widget import build_frame_header
from omni.physx.bindings import _physx as pxb
from omni.physx.bindings._physx import SimulationEvent
from omni.physx import get_physx_interface
from omni.physx.scripts import utils
from omni.physx.scripts.utils import get_schema_instances
from omni.physxui import get_physxui_interface
from omni import ui
import pathlib
from pathlib import Path
from pxr import Gf
from pxr import PhysxSchema
from pxr import Sdf
from pxr.Sdf import PropertySpec as Spec
from pxr import Usd
from pxr import UsdGeom
from pxr import UsdPhysics
from pxr import UsdShade
import typing
__all__ = ['ADD_GLYPH', 'APIInheritanceCheckWidget', 'ChildJointWidget', 'CustomTokenComboBuilder', 'DistanceJointWidget', 'DriveWidget', 'EYE_GLYPH', 'ExtendedAttachmentWidget', 'ExtendedAutoParticleClothWidget', 'ExtendedColliderWidget', 'ExtendedComputeAutoAttachmentWidget', 'ExtendedDeformableBodyWidget', 'ExtendedDeformableSurfaceWidget', 'ExtendedDeformalbeSurfaceMaterialWidget', 'ExtendedMaterialWidget', 'ExtendedMimicJointWidget', 'ExtendedParticleClothWidget', 'ExtendedParticleSystemWidget', 'ExtendedSceneWidget', 'ExtendedTetrahedralMeshWidget', 'ExtendedVehicleContextWidget', 'ExtendedVehicleControllerBaseWidget', 'ExtendedVehicleControllerWidget', 'ExtendedVehicleDriveStandardWidget', 'ExtendedVehicleMultiWheelDifferentialWidget', 'ExtendedVehicleSuspensionWidget', 'ExtendedVehicleTireWidget', 'ExtendedVehicleWheelAttachmentWidget', 'ExtendedVehicleWheelWidget', 'ExtendedVehicleWidget', 'FixedJointWidget', 'FixedTendonWidget', 'GearJointWidget', 'GearingWidgetBuilder', 'Gf', 'GfVecAttributeModel', 'HORIZONTAL_SPACING', 'ICON_PATH', 'InvisibleMenuWidgetBase', 'InvisibleWidget', 'JointStateWidget', 'JointVisualizationWidget', 'JointWidget', 'LimitWidget', 'Limits', 'LocalSpaceVelocitiesWidget', 'MIMIC_JOINT_ATTRIBUTE_NAME_DAMPING_RATIO_ROTX', 'MIMIC_JOINT_ATTRIBUTE_NAME_DAMPING_RATIO_ROTY', 'MIMIC_JOINT_ATTRIBUTE_NAME_DAMPING_RATIO_ROTZ', 'MIMIC_JOINT_ATTRIBUTE_NAME_NATURAL_FREQUENCY_ROTX', 'MIMIC_JOINT_ATTRIBUTE_NAME_NATURAL_FREQUENCY_ROTY', 'MIMIC_JOINT_ATTRIBUTE_NAME_NATURAL_FREQUENCY_ROTZ', 'MainFrameWidget', 'MassAPIWidget', 'MaterialUtils', 'OverlayButton', 'Path', 'PhysicsCustomPropertiesWidget', 'PhysicsDefaultMaterialBindingWidget', 'PhysicsMaterialBindingWidget', 'PhysicsWidget', 'PhysxLimitExtJointWidget', 'PhysxSchema', 'PlaceholderAttribute', 'PrimPathWidget', 'PrismaticJointWidget', 'Prompt', 'REFRESH_GLYPH', 'REMOVE_BUTTON_STYLE', 'RackAndPinionJoint', 'RevoluteJointWidget', 'Sdf', 'SimplePropertyWidget', 'SimulationEvent', 'SingleInstanceWidget', 'SpatialTendonWidget', 'Spec', 'SphericalJointWidget', 'StringPrompt', 'TfTokenAttributeModelWMetadata', 'UiProp', 'Usd', 'UsdBase', 'UsdBindingAttributeWidget', 'UsdGeom', 'UsdPhysics', 'UsdPropertiesWidget', 'UsdPropertiesWidgetBuilder', 'UsdPropertyUiEntry', 'UsdShade', 'add_component', 'add_disabled_styles', 'asyncio', 'build_frame_header', 'carb', 'context_menu', 'database', 'dbutils', 'defaultdict', 'display_name_from_name', 'display_name_from_prop_name', 'enable_widget', 'enum', 'execute', 'filter_property_with_multiapply_schema', 'generate_from_prim_list', 'generate_from_prim_list_with_cache', 'generate_prims', 'generate_prims_with_cache', 'get_align_property_util', 'get_components', 'get_physx_interface', 'get_physxui_interface', 'get_schema_instances', 'has_schema', 'is_multi_api', 'is_parent_api_instance', 'is_property_in_schema', 'math', 'maxsize', 'namedtuple', 'omni', 'partial', 'pxb', 'remove_component', 'sort_props', 'split_at_capitals', 'style', 'ui', 'utils']
class APIInheritanceCheckWidget(PhysicsWidget):
    def __init__(self, title, schema, builders):
        ...
    def _build_frame(self):
        ...
    def _build_group_frame(self, name, props, stage):
        ...
    def on_new_payload(self, payload):
        ...
class ChildJointWidget(PhysicsWidget):
    def __init__(self, title, schema, builders):
        ...
    def _filter_props_to_build(self, prim):
        ...
class DistanceJointWidget(PhysxLimitExtJointWidget):
    def __init__(self, title, schema, builders):
        ...
class DriveWidget(PhysicsWidget):
    fake_component: typing.ClassVar[omni.kit.property.physx.database.Component]  # value = Component(is_present=None, can_add=None, name='PhysicsDrive', title='Drive', main_schema=None, add_component_fn=None, remove_component_fn=None, can_show=None)
    def build_impl(self):
        ...
class ExtendedAttachmentWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedAutoParticleClothWidget(PhysicsWidget):
    springBendStiffness_title: typing.ClassVar[str] = 'Bend Stiffness'
    springDamping_title: typing.ClassVar[str] = 'Spring Damping'
    springShearStiffness_title: typing.ClassVar[str] = 'Shear Stiffness'
    springStretchStiffness_title: typing.ClassVar[str] = 'Stretch Stiffness'
    def _build_property_item(self, stage, prop, prim_paths):
        ...
    def _filter_props_to_build(self, prim):
        ...
    def build_items(self):
        ...
class ExtendedColliderWidget(PhysicsWidget):
    margin_title: typing.ClassVar[str] = 'Margin'
    def __init__(self, title, schema, builders):
        ...
    def _build_property_item(self, stage, prop, prim_paths):
        ...
    def _filter_props_to_build(self, prim):
        ...
class ExtendedComputeAutoAttachmentWidget(PhysicsWidget):
    class AType(enum.Enum):
        """
        An enumeration.
        """
        DEFORMABLE_BODY: typing.ClassVar[ExtendedComputeAutoAttachmentWidget.AType]  # value = <AType.DEFORMABLE_BODY: 2>
        DEFORMABLE_SURFACE: typing.ClassVar[ExtendedComputeAutoAttachmentWidget.AType]  # value = <AType.DEFORMABLE_SURFACE: 3>
        PARTICLES: typing.ClassVar[ExtendedComputeAutoAttachmentWidget.AType]  # value = <AType.PARTICLES: 4>
        RIGID: typing.ClassVar[ExtendedComputeAutoAttachmentWidget.AType]  # value = <AType.RIGID: 1>
        WORLD: typing.ClassVar[ExtendedComputeAutoAttachmentWidget.AType]  # value = <AType.WORLD: 0>
    prop_data_custom: typing.ClassVar[dict] = {'physxAutoAttachment:maskShapes': ('Mask Shapes', '', '', None, 'The union of the shapes defines a mask volume within which attachment points are generated')}
    prop_data_schema: typing.ClassVar[dict] = {'physxAutoAttachment:enableDeformableVertexAttachments': ('Attach Overlapping Vertices', '', 'bool', 'Enables vertex based attachments'), 'physxAutoAttachment:deformableVertexOverlapOffset': ('Overlap Offset', '', 'float', 'Defines at which distance attachments are created'), 'physxAutoAttachment:enableRigidSurfaceAttachments': ('Attach Rigid Surface', '', 'bool', 'Enables creating attachments on rigid surface'), 'physxAutoAttachment:rigidSurfaceSamplingDistance': ('Surface Sampling Distance', '', 'float', 'Defines distance at which attachments are created on rigid surface'), 'physxAutoAttachment:enableCollisionFiltering': ('Collision Filtering', '', 'bool', 'Enables collision filtering'), 'physxAutoAttachment:collisionFilteringOffset': ('Filtering Offset', '', 'float', 'Defines at which distance elements are being filtered')}
    def _build_property_item(self, stage, prop, prim_paths):
        ...
    def _filter_props_to_build(self, prim):
        ...
    def _make_bool_controller(self, prop_name, model):
        ...
    def _make_state_controlled(self, prop_name, model, is_enabled_fn_name):
        ...
    def _set_widget_state(self):
        ...
    def _update_types(self):
        ...
    def build_items(self):
        ...
    def is_collisionFilteringOffset_enabled(self):
        ...
    def is_deformableVertexOverlapOffset_enabled(self):
        ...
    def is_enableRigidSurfaceAttachments_enabled(self):
        ...
    def is_rigidSurfaceSamplingDistance_enabled(self):
        ...
    def on_new_payload(self, payload):
        ...
class ExtendedDeformableBodyWidget(PhysicsWidget):
    coll_simp_force_conforming_title: typing.ClassVar[str] = 'Force Conforming'
    coll_simp_remeshing_res_title: typing.ClassVar[str] = 'Remeshing Resolution'
    coll_simp_remeshing_title: typing.ClassVar[str] = 'Enable Remeshing'
    coll_simp_target_title: typing.ClassVar[str] = 'Target Triangle Count'
    coll_simp_title: typing.ClassVar[str] = 'Collision Mesh Simplification'
    is_kinematic_title: typing.ClassVar[str] = 'Kinematic Enabled'
    sim_mesh_res_title: typing.ClassVar[str] = 'Simulation Mesh Resolution'
    def __init__(self, title, schema, builders):
        ...
    def _build_property_item(self, stage, prop, prim_paths):
        ...
    def _filter_props_to_build(self, prim):
        ...
    def _set_widget_state(self):
        ...
    def build_items(self):
        ...
class ExtendedDeformableSurfaceWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedDeformalbeSurfaceMaterialWidget(PhysicsWidget):
    prop_data_custom: typing.ClassVar[dict] = {'physxDeformableSurfaceMaterial:bendDamping': ('Bend Damping', '', 'float', 0.0, 'The amount of damping that gets applied to bending motions.'), 'physxDeformableSurfaceMaterial:elasticityDamping': ('Elasticity Damping', '', 'float', 0.0, 'The amount of damping that gets applied to stretching motions.'), 'physxDeformableSurfaceMaterial:bendStiffness': ('Bend Stiffness', '', 'float', 0.0, "The bending stiffness defines the surface's resistance to bending.")}
    def _build_property_item(self, stage, prop, prim_paths):
        ...
    def _filter_props_to_build(self, prim):
        ...
    def build_items(self):
        ...
class ExtendedMaterialWidget(PhysicsWidget):
    def __init__(self, title, schema, builders):
        ...
    def _build_property_item(self, stage, prop, prim_paths):
        ...
    def _set_widget_state(self):
        ...
    def build_items(self):
        ...
class ExtendedMimicJointWidget(PhysicsWidget):
    prop_data_custom: typing.ClassVar[dict] = {'physxMimicJoint:rotX:naturalFrequency': ('Natural Frequency', 'rotX', 'float', 0.0, 'The natural frequency of mimic joint compliance. A mimic joint with naturalFrequency <= 0 will behave as a hard constraint. Larger values of naturalFrequency and dampingRatio will make the mimic joint stiffer and more akin to a hard constraint.'), 'physxMimicJoint:rotY:naturalFrequency': ('Natural Frequency', 'rotY', 'float', 0.0, 'The natural frequency of mimic joint compliance. A mimic joint with naturalFrequency <= 0 will behave as a hard constraint. Larger values of naturalFrequency and dampingRatio will make the mimic joint stiffer and more akin to a hard constraint.'), 'physxMimicJoint:rotZ:naturalFrequency': ('Natural Frequency', 'rotZ', 'float', 0.0, 'The natural frequency of mimic joint compliance. A mimic joint with naturalFrequency <= 0 will behave as a hard constraint. Larger values of naturalFrequency and dampingRatio will make the mimic joint stiffer and more akin to a hard constraint.'), 'physxMimicJoint:rotX:dampingRatio': ('Damping Ratio', 'rotX', 'float', 0.0, 'The damping ratio of mimic joint compliance. A mimic joint with dampingRatio <= 0 will behave as a hard constraint. Larger values of naturalFrequency and dampingRatio will make the mimic joint stiffer and more akin to a hard constraint.'), 'physxMimicJoint:rotY:dampingRatio': ('Damping Ratio', 'rotY', 'float', 0.0, 'The damping ratio of mimic joint compliance. A mimic joint with dampingRatio <= 0 will behave as a hard constraint. Larger values of naturalFrequency and dampingRatio will make the mimic joint stiffer and more akin to a hard constraint.'), 'physxMimicJoint:rotZ:dampingRatio': ('Damping Ratio', 'rotZ', 'float', 0.0, 'The damping ratio of mimic joint compliance. A mimic joint with dampingRatio <= 0 will behave as a hard constraint. Larger values of naturalFrequency and dampingRatio will make the mimic joint stiffer and more akin to a hard constraint.')}
    def _build_property_item(self, stage, prop, prim_paths):
        ...
    def _filter_props_to_build(self, prim):
        ...
class ExtendedParticleClothWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedParticleSystemWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedSceneWidget(PhysicsWidget):
    def __init__(self, title, schema, builders):
        ...
    def _build_property_item(self, stage, prop, prim_paths):
        ...
    def _filter_props_to_build(self, prim):
        ...
    def _set_widget_state(self):
        ...
    def build_items(self):
        ...
class ExtendedTetrahedralMeshWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedVehicleContextWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedVehicleControllerBaseWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedVehicleControllerWidget(ExtendedVehicleControllerBaseWidget):
    def on_new_payload(self, payload):
        ...
class ExtendedVehicleDriveStandardWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedVehicleMultiWheelDifferentialWidget(PhysicsWidget):
    def on_new_payload(self, payload):
        ...
class ExtendedVehicleSuspensionWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedVehicleTireWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedVehicleWheelAttachmentWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedVehicleWheelWidget(PhysicsWidget):
    def _filter_props_to_build(self, prim):
        ...
class ExtendedVehicleWidget(PhysicsWidget):
    def __init__(self, title, schema, builders):
        ...
    def _filter_props_to_build(self, prim):
        ...
class FixedJointWidget(ChildJointWidget):
    def __init__(self, title, schema, builders):
        ...
    def on_new_payload(self, payload):
        ...
class FixedTendonWidget(APIInheritanceCheckWidget):
    instances: typing.ClassVar[set]  # value = {<omni.kit.property.physx.widgets.FixedTendonWidget object>, <omni.kit.property.physx.widgets.FixedTendonWidget object>}
    def __init__(self, title, schema, builders):
        ...
    def _build_group_frame(self, name, props, stage):
        ...
    def _cleanup(self):
        ...
    def clean(self):
        ...
    def on_new_payload(self, payload):
        ...
class GearJointWidget(ChildJointWidget):
    def __init__(self, title, schema, builders):
        ...
class InvisibleMenuWidgetBase(omni.kit.window.property.templates.simple_property_widget.SimplePropertyWidget):
    class Cache(tuple):
        """
        Cache(is_a_base_joint,)
        """
        __match_args__: typing.ClassVar[tuple] = ('is_a_base_joint')
        __slots__: typing.ClassVar[tuple] = tuple()
        _field_defaults: typing.ClassVar[dict] = {}
        _fields: typing.ClassVar[tuple] = ('is_a_base_joint')
        @staticmethod
        def __new__(_cls, is_a_base_joint):
            """
            Create new instance of Cache(is_a_base_joint,)
            """
        @classmethod
        def _make(cls, iterable):
            """
            Make a new Cache object from a sequence or iterable
            """
        def __getnewargs__(self):
            """
            Return self as a plain tuple.  Used by copy and pickle.
            """
        def __repr__(self):
            """
            Return a nicely formatted representation string
            """
        def _asdict(self):
            """
            Return a new dict which maps field names to their values.
            """
        def _replace(self, **kwds):
            """
            Return a new Cache object replacing specified fields with new values
            """
    class Info(tuple):
        """
        Info(show, enable)
        """
        __match_args__: typing.ClassVar[tuple] = ('show', 'enable')
        __slots__: typing.ClassVar[tuple] = tuple()
        _field_defaults: typing.ClassVar[dict] = {}
        _fields: typing.ClassVar[tuple] = ('show', 'enable')
        @staticmethod
        def __new__(_cls, show, enable):
            """
            Create new instance of Info(show, enable)
            """
        @classmethod
        def _make(cls, iterable):
            """
            Make a new Info object from a sequence or iterable
            """
        def __getnewargs__(self):
            """
            Return self as a plain tuple.  Used by copy and pickle.
            """
        def __repr__(self):
            """
            Return a nicely formatted representation string
            """
        def _asdict(self):
            """
            Return a new dict which maps field names to their values.
            """
        def _replace(self, **kwds):
            """
            Return a new Info object replacing specified fields with new values
            """
    def __init__(self, title, menu_root, components = {}, extras = list(), show_limit_warnings = False):
        ...
    def _add_menu_items(self):
        ...
    def _get_component_info(self, objects, idx):
        ...
    def _get_extra_info(self, objects, idx):
        ...
    def _has_any_extra_shown(self, objects):
        ...
    def _is_over_selection_limit(self, objects):
        ...
    def _is_over_subtree_limit(self, objects):
        ...
    def _refresh(self, objects):
        ...
    def _refresh_all_with_early_exit(self, prims):
        ...
    def _remove_menu_items(self):
        ...
    def _reset_show(self):
        ...
    def _undo_redo_on_change(self, cmds):
        ...
    def clean(self):
        ...
    def on_new_payload(self, payload):
        ...
    def refresh_menu_items(self):
        ...
class InvisibleWidget(InvisibleMenuWidgetBase):
    name: typing.ClassVar[str] = 'physx_invisible'
    def __init__(self):
        ...
    def _undo_redo_on_change(self, cmds):
        ...
class JointStateWidget(PhysicsWidget):
    fake_component: typing.ClassVar[omni.kit.property.physx.database.Component]  # value = Component(is_present=None, can_add=None, name='JointState', title='Joint State', main_schema=None, add_component_fn=None, remove_component_fn=None, can_show=None)
    def __init__(self, title, schema, builders):
        ...
    def _build_property_item(self, stage, prop, prim_paths):
        ...
    def _on_simulation_event(self, event):
        ...
    def build_impl(self):
        ...
class JointVisualizationWidget(omni.kit.window.property.templates.simple_property_widget.SimplePropertyWidget):
    name: typing.ClassVar[str] = 'physx_joint_visualization'
    def __init__(self):
        ...
    def build_items(self):
        ...
    def is_visible(self):
        ...
    def on_new_payload(self, payload):
        ...
class JointWidget(PhysicsWidget):
    def __init__(self, title, schema, builders):
        ...
    def on_new_payload(self, payload):
        ...
class LimitWidget(PhysicsWidget):
    fake_component: typing.ClassVar[omni.kit.property.physx.database.Component]  # value = Component(is_present=None, can_add=None, name='PhysicsLimit', title='Limit', main_schema=None, add_component_fn=None, remove_component_fn=None, can_show=None)
    def build_impl(self):
        ...
class LocalSpaceVelocitiesWidget(PhysicsWidget):
    def __init__(self, title, schema, builders):
        ...
    def _filter_props_to_build(self, prim):
        ...
class MainFrameWidget(omni.kit.window.property.templates.simple_property_widget.SimplePropertyWidget):
    class ExtWidget:
        def __init__(self, widget):
            ...
    instance: typing.ClassVar[MainFrameWidget]  # value = <omni.kit.property.physx.widgets.MainFrameWidget object>
    name: typing.ClassVar[str] = 'physx_main_frame_widget'
    popup_populate_fns: typing.ClassVar[dict] = {}
    @staticmethod
    def register_popup_menu_populate_fn(base_name, populate_fn):
        ...
    def __init__(self, subwidgets):
        ...
    def _add_popup_menu(self):
        ...
    def _build_frame(self):
        ...
    def build_items(self):
        ...
    def clean(self):
        ...
    def get_subwidget_by_title(self, title):
        ...
    def is_a_omnijoint_check(self, payload):
        ...
    def on_new_payload(self, payload):
        ...
    def register_widget(self, name, widget):
        ...
    def request_rebuild(self):
        ...
    def unregister_widget(self, name):
        ...
class MassAPIWidget(PhysicsWidget):
    def _show_remove_button(self):
        ...
    def build_items(self):
        ...
    def on_new_payload(self, payload):
        ...
class PhysicsCustomPropertiesWidget(omni.kit.property.usd.usd_property_widget.UsdPropertiesWidget):
    name: typing.ClassVar[str] = 'physx_custom_properties'
    def __init__(self):
        ...
    def _build_frame(self):
        ...
    def _customize_props_layout(self, props):
        ...
    def _filter_props_to_build(self, props):
        ...
    def clean_before_rebuild(self):
        ...
    def on_new_payload(self, payload):
        ...
    def set_properties(self, properties):
        ...
class PhysicsDefaultMaterialBindingWidget(omni.kit.property.material.scripts.widgets.material_binding.material_binding_widget.MaterialBindingWidget):
    name: typing.ClassVar[str] = 'physx_default_material_binding'
    title: typing.ClassVar[str] = 'Physics default material'
    def __init__(self):
        ...
    def is_visible(self):
        ...
    def on_new_payload(self, payload):
        ...
class PhysicsMaterialBindingWidget(omni.kit.property.material.scripts.widgets.material_binding.material_binding_widget.MaterialBindingWidget):
    name: typing.ClassVar[str] = 'physx_material_binding'
    title: typing.ClassVar[str] = 'Physics materials on selected models'
    def __init__(self):
        ...
    def is_visible(self):
        ...
    def on_new_payload(self, payload):
        ...
class PhysicsWidget(omni.kit.property.usd.usd_property_widget.UsdPropertiesWidget):
    def __init__(self, title, schema, builders):
        ...
    def _build_frame(self):
        ...
    def _build_group_frame(self, name, props, stage):
        ...
    def _build_impl_with_remove_button(self, component):
        ...
    def _build_property_item(self, stage, prop, prim_paths):
        ...
    def _customize_props_layout(self, props):
        ...
    def _filter_props_to_build(self, prim):
        ...
    def _get_shared_properties_from_selected_prims(self, anchor_prim):
        ...
    def _is_main_schema_present(self):
        ...
    def _remove_prompt_check(self, title, on_yes):
        ...
    def _show_remove_button(self):
        ...
    def build_impl(self):
        ...
    def build_nested_group_frames(self, stage, grouped_props):
        ...
    def build_property_item(self, stage, prop, prim_paths):
        ...
    def clean(self):
        ...
    def get_default_label_kwargs(self):
        ...
    def is_visible(self):
        ...
    def on_new_payload(self, payload):
        ...
    def request_rebuild(self):
        ...
    def show_frame(self, show):
        ...
class PhysxLimitExtJointWidget(ChildJointWidget):
    def __init__(self, title, schema, builders, limit_instance):
        ...
    def _filter_props_to_build(self, prim):
        ...
class PrismaticJointWidget(PhysxLimitExtJointWidget):
    def __init__(self, title, schema, builders):
        ...
class RackAndPinionJoint(ChildJointWidget):
    def __init__(self, title, schema, builders):
        ...
class RevoluteJointWidget(PhysxLimitExtJointWidget):
    def __init__(self, title, schema, builders):
        ...
class SingleInstanceWidget(PhysicsWidget):
    def __init__(self, title, schema, instance_name, builders):
        ...
    def _filter_props_to_build(self, prim):
        ...
    def build_nested_group_frames(self, stage, grouped_props):
        ...
class SpatialTendonWidget(APIInheritanceCheckWidget):
    def _build_group_frame(self, name, props, stage):
        ...
    def _build_property_item(self, stage, prop, prim_paths):
        ...
    def _filter_props_to_build(self, prim):
        ...
class SphericalJointWidget(PhysxLimitExtJointWidget):
    def __init__(self, title, schema, builders):
        ...
class UiProp(omni.kit.property.usd.usd_property_widget.UsdPropertyUiEntry):
    def __init__(self):
        ...
    def __repr__(self):
        ...
    def _common(self):
        ...
    def finalize(self, stage):
        ...
    def from_custom(self, name, display_name, display_group, type_name, default, doc = ''):
        ...
    def from_property(self, prop, base_name = None, instance_name = None, prop_spec = None):
        ...
    def from_property_spec(self, prop_spec, prim, schema, instance_name = None, multi_prefix = None):
        ...
    def gen_multiply_fn(self, multiply_fn_name, modifier):
        ...
def add_component(component, payload):
    ...
def display_name_from_name(name):
    ...
def display_name_from_prop_name(prop):
    ...
def filter_property_with_multiapply_schema(prop, schema, prop_names):
    ...
def generate_from_prim_list(stage, prim_list):
    ...
def generate_from_prim_list_with_cache(stage, prim_list):
    ...
def generate_prims(payload):
    ...
def generate_prims_with_cache(payload):
    ...
def get_components(payload, schema = None):
    ...
def has_schema(prim, schema):
    ...
def is_multi_api(schema):
    ...
def is_property_in_schema(schema_prop_names, instance_name, prop_path, api_path_func):
    ...
def remove_component(component, payload, instance_name: str = None):
    ...
def sort_props(props, schemas):
    ...
ADD_GLYPH: str = '\uf051'
EYE_GLYPH: str = '\uf077'
HORIZONTAL_SPACING: int = 4
ICON_PATH: pathlib.PosixPath  # value = PosixPath('/home/chris/isaacsim/extscache/omni.kit.property.usd-4.2.16+d02c707b/data/icons')
MIMIC_JOINT_ATTRIBUTE_NAME_DAMPING_RATIO_ROTX: str = 'physxMimicJoint:rotX:dampingRatio'
MIMIC_JOINT_ATTRIBUTE_NAME_DAMPING_RATIO_ROTY: str = 'physxMimicJoint:rotY:dampingRatio'
MIMIC_JOINT_ATTRIBUTE_NAME_DAMPING_RATIO_ROTZ: str = 'physxMimicJoint:rotZ:dampingRatio'
MIMIC_JOINT_ATTRIBUTE_NAME_NATURAL_FREQUENCY_ROTX: str = 'physxMimicJoint:rotX:naturalFrequency'
MIMIC_JOINT_ATTRIBUTE_NAME_NATURAL_FREQUENCY_ROTY: str = 'physxMimicJoint:rotY:naturalFrequency'
MIMIC_JOINT_ATTRIBUTE_NAME_NATURAL_FREQUENCY_ROTZ: str = 'physxMimicJoint:rotZ:naturalFrequency'
REFRESH_GLYPH: str = '\uf072'
REMOVE_BUTTON_STYLE: dict = {'image_url': '/home/chris/isaacsim/extscache/omni.kit.property.usd-4.2.16+d02c707b/data/icons/remove.svg', 'margin': 0, 'padding': 0}
context_menu: omni.ui._ui.Menu  # value = <omni.ui._ui.Menu object>
maxsize: int = 9223372036854775807
style: dict = {'image_url': '/home/chris/isaacsim/extscache/omni.kit.property.usd-4.2.16+d02c707b/data/icons/remove.svg', 'margin': 0, 'padding': 0}
