from __future__ import annotations
import omni as omni
from omni.kit.property.usd.usd_model_base import UsdBase
from omni.kit.property.usd.usd_model_items import AllowedTokenItem
from omni import ui
from pxr import Sdf
import pxr.Usd
from pxr import Usd
import typing
__all__: list = ['VariantSetModel', 'SelectVariantPrimCommand']
class SelectVariantPrimCommand(omni.kit.commands.command.Command):
    __abstractmethods__: typing.ClassVar[frozenset]  # value = frozenset()
    _abc_impl: typing.ClassVar[_abc._abc_data]  # value = <_abc._abc_data object>
    def __init__(self, prim_path: str, vset_name: str, var_name: str, usd_context_name: str = ''):
        ...
    def do(self):
        ...
    def undo(self):
        ...
class VariantSetModel(omni.ui._ui.AbstractItemModel, omni.kit.property.usd.usd_model_base.UsdBase):
    def __init__(self, stage: pxr.Usd.Stage, object_paths: typing.List[pxr.Sdf.Path], variant_set_name: str, self_refresh: bool):
        ...
    def _current_index_changed(self, model):
        ...
    def _get_variant_set(self):
        ...
    def _on_dirty(self):
        ...
    def _read_value(self, obj: pxr.Usd.Object, time_code: pxr.Usd.TimeCode):
        ...
    def _update_value(self, force = False):
        ...
    def _update_variant_names(self):
        ...
    def begin_edit(self, item = None):
        ...
    def clean(self):
        ...
    def end_edit(self, item = None):
        ...
    def get_item_children(self, item):
        ...
    def get_item_value_model(self, item, column_id):
        ...
    def set_value(self, value, comp = -1):
        ...
