from __future__ import annotations
import omni as omni
from omni.kit.widget.layers.layer_item import LayerItem
from omni import ui
import weakref as weakref
__all__ = ['LayerItem', 'LayerLinkDelegate', 'PrimLinkDelegate', 'omni', 'ui', 'weakref']
class LayerLinkDelegate(omni.ui._ui.AbstractItemDelegate):
    def __init__(self, usd_context):
        ...
    def _build_popup_menu(self):
        ...
    def _get_target_layers(self):
        ...
    def _link_specs(self):
        ...
    def _on_accept_drop(self, item, url):
        ...
    def _on_drop(self, item, e: omni.ui._ui.WidgetMouseDropEvent):
        ...
    def _on_mouse_double_clicked(self, button, item, expanded):
        ...
    def _on_mouse_pressed(self, button, item, expanded):
        ...
    def _unlink_specs(self):
        ...
    def build_branch(self, model, item, column_id, level, expanded):
        """
        Create a branch widget that opens or closes subtree
        """
    def build_header(self, column_id):
        ...
    def build_widget(self, model, item, column_id, level, expanded):
        """
        Create a widget per item
        """
    def clear_layer_links(self):
        ...
    def destroy(self):
        ...
    def on_stage_attached(self):
        ...
    def set_prim_widget(self, layerlink_widget):
        ...
    def set_tree_view(self, tree_view: omni.ui._ui.TreeView):
        ...
class PrimLinkDelegate(omni.ui._ui.AbstractItemDelegate):
    def __init__(self, usd_context):
        ...
    def _build_popup_menu(self):
        ...
    def _get_select_specs(self):
        ...
    def _link_layers(self):
        ...
    def _on_lock_pressed(self, button, item, expanded):
        ...
    def _on_mouse_double_clicked(self, button, item, expanded):
        ...
    def _on_mouse_pressed(self, button, item, expanded):
        ...
    def _unlink_layers(self):
        ...
    def build_branch(self, model, item, column_id, level, expanded):
        """
        Create a branch widget that opens or closes subtree
        """
    def build_widget(self, model, item, column_id, level, expanded):
        """
        Create a widget per item
        """
    def clear_specs_links(self):
        ...
    def destroy(self):
        ...
    def set_layerlink_widget(self, layerlink_widget):
        ...
    def set_tree_view(self, treeview: omni.ui._ui.TreeView):
        ...
