from __future__ import annotations
import asyncio as asyncio
import carb as carb
import omni as omni
from omni.kit.menu.utils.extension_window_helper import MenuHelperExtension
from omni.kit.widget.layers.layer_model import LayerModel
from omni.kit.widget.layers.link_delegate import LayerLinkDelegate
from omni.kit.widget.layers.link_delegate import PrimLinkDelegate
from omni.kit.widget.layers.models.prim_model import PrimModel
from omni.kit.window.file.app_ui import DialogOptions
from omni import ui
import re as re
import typing
__all__ = ['DialogOptions', 'LayerLinkDelegate', 'LayerLinkSettings', 'LayerLinkWidget', 'LayerLinkWindow', 'LayerModel', 'MenuHelperExtension', 'PrimLinkDelegate', 'PrimModel', 'PrimsWidget', 'asyncio', 'carb', 'omni', 're', 'ui']
class LayerLinkSettings:
    SETTINGS_ENABLE_SPEC_LINKING_MODE: typing.ClassVar[str] = '/persistent/app/layerwindow/enableSpecLinkingMode'
    def __init__(self):
        ...
    @property
    def enable_auto_authoring_mode(self):
        ...
    @enable_auto_authoring_mode.setter
    def enable_auto_authoring_mode(self, enabled: bool):
        ...
    @property
    def enable_spec_linking_mode(self):
        ...
    @enable_spec_linking_mode.setter
    def enable_spec_linking_mode(self, enabled: bool):
        ...
    @property
    def file_dialog_show_root_layer_location(self):
        ...
    @file_dialog_show_root_layer_location.setter
    def file_dialog_show_root_layer_location(self, root_layer: bool):
        ...
    @property
    def show_info_notification(self):
        ...
    @show_info_notification.setter
    def show_info_notification(self, enabled: bool):
        ...
    @property
    def show_layer_contents(self):
        ...
    @show_layer_contents.setter
    def show_layer_contents(self, show: bool):
        ...
    @property
    def show_layer_file_extension(self):
        ...
    @show_layer_file_extension.setter
    def show_layer_file_extension(self, show: bool):
        ...
    @property
    def show_merge_or_flatten_warning(self):
        ...
    @show_merge_or_flatten_warning.setter
    def show_merge_or_flatten_warning(self, enabled: bool):
        ...
    @property
    def show_metricsassembler_layer(self):
        ...
    @show_metricsassembler_layer.setter
    def show_metricsassembler_layer(self, show: bool):
        ...
    @property
    def show_missing_reference(self):
        ...
    @show_missing_reference.setter
    def show_missing_reference(self, show: bool):
        ...
    @property
    def show_session_layer(self):
        ...
    @show_session_layer.setter
    def show_session_layer(self, show: bool):
        ...
    @property
    def show_warning_notification(self):
        ...
    @show_warning_notification.setter
    def show_warning_notification(self, enabled: bool):
        ...
class LayerLinkWidget:
    @staticmethod
    def _set_widget_visible(widget: omni.ui._ui.Widget, visible):
        """
        Utility for using in lambdas
        """
    def __del__(self):
        ...
    def __init__(self, usd_context, stage):
        ...
    def _filter_by_text(self, filter_text: str):
        """
        Set the search filter string to the models and widgets
        """
    def _on_stage_attached(self, attached: bool):
        ...
    def build_ui(self):
        ...
    def destroy(self):
        ...
    def get_select_layers(self):
        ...
    def select(self, layers):
        ...
    def set_prim_widget(self, prim_widegt: PrimsWidget):
        ...
class LayerLinkWindow(omni.kit.menu.utils.extension_window_helper.MenuHelperExtension):
    MENU_GROUP: typing.ClassVar[str] = 'Window'
    WINDOW_NAME: typing.ClassVar[str] = 'Layer Linking'
    def __del__(self):
        ...
    def __init__(self):
        ...
    def _build_ui(self):
        ...
    def _clear(self):
        ...
    def _destroy_window_async(self):
        ...
    def _on_frame_built(self):
        ...
    def _set_centric(self, value):
        ...
    def _visiblity_changed_fn(self, visible):
        ...
    def destroy(self):
        ...
    def show_window(self, value):
        ...
class PrimsWidget:
    @staticmethod
    def _set_widget_visible(widget: omni.ui._ui.Widget, visible):
        """
        Utility for using in lambdas
        """
    def __del__(self):
        ...
    def __init__(self, usd_context, stage):
        ...
    def _filter_by_text(self, filter_text: str):
        """
        Set the search filter string to the models and widgets
        """
    def _on_stage_event(self, event: carb.events._events.IEvent):
        ...
    def _open_stage(self, stage):
        """
        Called when opening a new stage
        """
    def build_ui(self):
        ...
    def destroy(self):
        ...
    def get_select_specs(self):
        ...
    def select(self, spec_paths: typing.List[str]):
        ...
    def set_layerlink_widget(self, layerlink_widget):
        ...
    def set_width(self, width):
        ...
