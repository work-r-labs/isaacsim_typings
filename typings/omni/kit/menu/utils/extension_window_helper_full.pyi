"""

Advanced helper class for adding/removing "Window" menu to your extension & controlling ui.Window creation/show/hide. Only thing required is function to create ui_window
"""
from __future__ import annotations
import asyncio as asyncio
import omni as omni
from omni.kit.menu.utils.builder_utils import MenuItemDescription
from omni import ui
__all__ = ['MenuHelperExtensionFull', 'MenuHelperWindow', 'MenuItemDescription', 'asyncio', 'omni', 'ui']
class MenuHelperExtensionFull:
    """
    
        Advanced helper class for adding/removing "Window" menu to your extension & controlling ui.Window creation/show/hide. Only thing required is function to create ui_window
        
    """
    class ArrayRedirect:
        def __eq__(self, other):
            ...
        def __ge__(self, other):
            ...
        def __getattr__(self, name):
            ...
        def __gt__(self, other):
            ...
        def __hash__(self):
            ...
        def __init__(self, array_ptr, index):
            ...
        def __le__(self, other):
            ...
        def __lt__(self, other):
            ...
        def __ne__(self, other):
            ...
        def __repr__(self):
            ...
    def _MenuHelperExtensionFull__get_window(self, window, index) -> omni.ui._ui.Window:
        ...
    def __init__(self):
        ...
    def _destroy_menu(self, index = 0):
        ...
    def _destroy_window_async(self, index):
        ...
    def _get_action_name(self, menu_path):
        ...
    def _hide(self, index = 0):
        ...
    def _is_visible(self, index) -> bool:
        ...
    def _refresh_menu(self, index = 0):
        ...
    def _setup_menu(self, index):
        ...
    def _show(self, index = 0):
        ...
    def _toggle_window(self, index = 0):
        ...
    def _visiblity_changed_fn(self, visible, index):
        ...
    def menu_shutdown(self, index = -1):
        ...
    def menu_startup(self, create_window_fn, window_name, menu_desc, menu_group, window_attr_name = None, verbose = False):
        ...
    def show_window(self, menu, value, index):
        ...
class MenuHelperWindow(omni.ui._ui.Window):
    def __init__(self, *args, **kwargs):
        ...
    def _visibility_changed_fn(self, visible):
        ...
    def destroy(self):
        ...
    def set_visibility_changed_listener(self, listener):
        ...
